#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
# Name: 万金易
# ID:   519021911049
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
# Name: 	万金易
# ID:   	519021911049
# Describe how and why you modified the baseline code.
# 1. add iaddq
# 2. we will set CC at iaddq, so if put iaddq $-1,%rdx before #    jp loop there will be no need to calculate andq %rdx,
#    %rdx.
# 3. 十路展开 + 消除bubble + 挑选过节点的三叉查找树定位剩余部分
# 
# 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
			iaddq  	$-9 ,%rdx   	# if len < 9, goto Tail
			jl		Tail
# Loop 9x1
# [9,+inf)		
Loop9x1:
	# read 9 val from src
			mrmovq 	 (%rdi),%rcx
			mrmovq 	8(%rdi),%rbx
			mrmovq 16(%rdi),%rbp
			mrmovq 24(%rdi),%r8
			mrmovq 32(%rdi),%r9
			mrmovq 40(%rdi),%r10
			mrmovq 48(%rdi),%r11
			mrmovq 56(%rdi),%r12
			mrmovq 64(%rdi),%r13
	# store to dst
			rmmovq %rcx,  (%rsi)
			rmmovq %rbx, 8(%rsi)
			rmmovq %rbp,16(%rsi)
			rmmovq %r8 ,24(%rsi)
			rmmovq %r9 ,32(%rsi)
			rmmovq %r10,40(%rsi)
			rmmovq %r11,48(%rsi)
			rmmovq %r12,56(%rsi)
			rmmovq %r13,64(%rsi)
			
			andq	%rcx,%rcx	# val0 <= 0?
			jle		test1		# if so, goto test1
			iaddq	$1,%rax		# count ++
test1:
			andq	%rbx,%rbx	# val1 <= 0?
			jle		test2		# if so, goto test2
			iaddq	$1,%rax		# count ++
test2:			
			andq	%rbp,%rbp	# val2 <= 0?
			jle		test3		# if so, goto test3
			iaddq	$1,%rax		# count ++
test3:
			andq	%r8 ,%r8	# val3 <= 0?
			jle		test4		# if so, goto test4
			iaddq	$1,%rax		# count ++
test4:
			andq	%r9 ,%r9	# val4 <= 0?
			jle		test5		# if so, goto test5
			iaddq	$1,%rax		# count ++
test5:
			andq	%r10,%r10	# val5 <= 0?
			jle		test6		# if so, goto test6
			iaddq	$1,%rax		# count ++
test6:
			andq	%r11,%r11	# val6 <= 0?
			jle		test7		# if so, goto test7
			iaddq	$1,%rax		# count ++
test7:
			andq	%r12,%r12	# val7 <= 0?
			jle		test8		# if so, goto test8
			iaddq	$1,%rax		# count ++
test8:
			andq	%r13,%r13	# val8 <= 0?
			jle		LoopEnd		# if so, goto loop end
			iaddq	$1,%rax		# count ++
LoopEnd:	
			iaddq	$72 ,%rdi	# src += 9
			iaddq	$72 ,%rsi	# dst += 9
			iaddq	$-9,%rdx	# len -= 10, set CC
			jge		Loop9x1		# [9,+inf), goto Loop9x1
# (-inf,8]
# [1,8]
# [-9,-1]
# -9 -8 -7
# -2 -1 0 1 2 3 4 5 6 
#         -2 -1 0 1 2 3 
# 0 1 2
# 3 4 5
# 6 7 8

Tail:
			iaddq	$7,%rdx			# if len <= 2
			jle		L02
			mrmovq	(%rdi),%rcx
			iaddq	$-3,%rdx
			jg		L68
			jmp		L35
L02:
			iaddq	$1,%rdx
			jl		Done
			mrmovq	(%rdi),%rcx
			rmmovq  %rcx,(%rsi)		# bubble
			je		Left1
			jg		Left2
L35:

			rmmovq  %rcx,(%rsi)
			iaddq	$1,%rdx
			je		Left4
			jg		Left5
			jmp		Left3
L68:
			rmmovq  %rcx,(%rsi)
			iaddq	$-2,%rdx
			je		Left7
			jg		Left8
			jmp		Left6
Left8:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	56(%rdi),%rcx	# read val from src
			jle		Tag8
			iaddq	$1,%rax			# count++
	Tag8:
			rmmovq 	%rcx,56(%rsi)	# ... and store it to dst
Left7:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	48(%rdi),%rcx	# read val from src
			jle		Tag7
			iaddq	$1,%rax			# count++
	Tag7:		
			rmmovq 	%rcx,48(%rsi)	# ... and store it to dst
Left6:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	40(%rdi),%rcx	# read val from src
			jle		Tag6
			iaddq	$1,%rax			# count++
	Tag6:
			rmmovq 	%rcx,40(%rsi)	# ... and store it to dst
Left5:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	32(%rdi),%rcx	# read val from src
			jle		Tag5
			iaddq	$1,%rax			# count++
	Tag5:
			rmmovq 	%rcx,32(%rsi)	# ... and store it to dst
Left4:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	24(%rdi),%rcx	# read val from src
			jle		Tag4
			iaddq	$1,%rax			# count++
	Tag4:
			rmmovq 	%rcx,24(%rsi)	# ... and store it to dst
Left3:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	16(%rdi),%rcx	# read val from src
			jle		Tag3
			iaddq	$1,%rax			# count++
	Tag3:
			rmmovq 	%rcx,16(%rsi)	# ... and store it to dst
Left2:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	8(%rdi),%rcx	# read val from src
			jle		Tag2
			iaddq	$1,%rax			# count++
	Tag2:
			rmmovq 	%rcx,8(%rsi)	# ... and store it to dst
Left1:
			andq	%rcx,%rcx		# test val <= 0?
			jle		Done
			iaddq	$1,%rax			# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad -6
	.quad -7
	.quad -8
	.quad -9
	.quad -10
	.quad 11
	.quad -12
	.quad -13
	.quad -14
	.quad 15
	.quad -16
	.quad -17
	.quad 18
	.quad -19
	.quad 20
	.quad -21
	.quad -22
	.quad 23
	.quad 24
	.quad 25
	.quad 26
	.quad 27
	.quad -28
	.quad -29
	.quad 30
	.quad -31
	.quad 32
	.quad -33
	.quad -34
	.quad 35
	.quad 36
	.quad -37
	.quad 38
	.quad 39
	.quad -40
	.quad 41
	.quad 42
	.quad 43
	.quad -44
	.quad 45
	.quad 46
	.quad 47
	.quad -48
	.quad 49
	.quad -50
	.quad -51
	.quad -52
	.quad 53
	.quad -54
	.quad 55
	.quad -56
	.quad -57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
