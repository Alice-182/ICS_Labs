                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f62806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Name: 万金易
                            | # ID:   519021911049
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | # Name: 	万金易
                            | # ID:   	519021911049
                            | # Describe how and why you modified the baseline code.
                            | # 1. add iaddq
                            | # 2. we will set CC at iaddq, so if put iaddq $-1,%rdx before #    jp loop there will be no need to calculate andq %rdx,
                            | #    %rdx.
                            | # 3. 十路展开 + 消除bubble + 挑选过节点的三叉查找树定位剩余部分
                            | # 
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: c0f2f6ffffffffffffff | 			iaddq  	$-10 ,%rdx   	# if len < 10, goto Tail
0x03c: 720602000000000000   | 			jl		Tail
                            | # Loop 10x1
                            | # [10,+inf)		
0x045:                      | Loop10x1:
                            | 	# read 10 val from src
0x045: 50170000000000000000 | 			mrmovq 	 (%rdi),%rcx
0x04f: 50370800000000000000 | 			mrmovq 	8(%rdi),%rbx
0x059: 50571000000000000000 | 			mrmovq 16(%rdi),%rbp
0x063: 50871800000000000000 | 			mrmovq 24(%rdi),%r8
0x06d: 50972000000000000000 | 			mrmovq 32(%rdi),%r9
0x077: 50a72800000000000000 | 			mrmovq 40(%rdi),%r10
0x081: 50b73000000000000000 | 			mrmovq 48(%rdi),%r11
0x08b: 50c73800000000000000 | 			mrmovq 56(%rdi),%r12
0x095: 50d74000000000000000 | 			mrmovq 64(%rdi),%r13
0x09f: 50e74800000000000000 | 			mrmovq 72(%rdi),%r14
                            | 	# store to dst
0x0a9: 40160000000000000000 | 			rmmovq %rcx,  (%rsi)
0x0b3: 40360800000000000000 | 			rmmovq %rbx, 8(%rsi)
0x0bd: 40561000000000000000 | 			rmmovq %rbp,16(%rsi)
0x0c7: 40861800000000000000 | 			rmmovq %r8 ,24(%rsi)
0x0d1: 40962000000000000000 | 			rmmovq %r9 ,32(%rsi)
0x0db: 40a62800000000000000 | 			rmmovq %r10,40(%rsi)
0x0e5: 40b63000000000000000 | 			rmmovq %r11,48(%rsi)
0x0ef: 40c63800000000000000 | 			rmmovq %r12,56(%rsi)
0x0f9: 40d64000000000000000 | 			rmmovq %r13,64(%rsi)
0x103: 40e64800000000000000 | 			rmmovq %r14,72(%rsi)
                            | 			
0x10d: 6211                 | 			andq	%rcx,%rcx	# val0 <= 0?
0x10f: 712201000000000000   | 			jle		test1		# if so, goto test1
0x118: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x122:                      | test1:
0x122: 6233                 | 			andq	%rbx,%rbx	# val1 <= 0?
0x124: 713701000000000000   | 			jle		test2		# if so, goto test2
0x12d: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x137:                      | test2:			
0x137: 6255                 | 			andq	%rbp,%rbp	# val2 <= 0?
0x139: 714c01000000000000   | 			jle		test3		# if so, goto test3
0x142: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x14c:                      | test3:
0x14c: 6288                 | 			andq	%r8 ,%r8	# val3 <= 0?
0x14e: 716101000000000000   | 			jle		test4		# if so, goto test4
0x157: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x161:                      | test4:
0x161: 6299                 | 			andq	%r9 ,%r9	# val4 <= 0?
0x163: 717601000000000000   | 			jle		test5		# if so, goto test5
0x16c: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x176:                      | test5:
0x176: 62aa                 | 			andq	%r10,%r10	# val5 <= 0?
0x178: 718b01000000000000   | 			jle		test6		# if so, goto test6
0x181: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x18b:                      | test6:
0x18b: 62bb                 | 			andq	%r11,%r11	# val6 <= 0?
0x18d: 71a001000000000000   | 			jle		test7		# if so, goto test7
0x196: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x1a0:                      | test7:
0x1a0: 62cc                 | 			andq	%r12,%r12	# val7 <= 0?
0x1a2: 71b501000000000000   | 			jle		test8		# if so, goto test8
0x1ab: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x1b5:                      | test8:
0x1b5: 62dd                 | 			andq	%r13,%r13	# val8 <= 0?
0x1b7: 71ca01000000000000   | 			jle		test9		# if so, goto test9
0x1c0: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x1ca:                      | test9:
0x1ca: 62ee                 | 			andq	%r14,%r14	# val8 <= 0?
0x1cc: 71df01000000000000   | 			jle		LoopEnd		# if so, goto loop end
0x1d5: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x1df:                      | LoopEnd:	
0x1df: c0f75000000000000000 | 			iaddq	$80 ,%rdi	# src += 10
0x1e9: c0f65000000000000000 | 			iaddq	$80 ,%rsi	# dst += 10
0x1f3: c0f2f6ffffffffffffff | 			iaddq	$-10,%rdx	# len -= 10, set CC
0x1fd: 754500000000000000   | 			jge		Loop10x1	# [10,+inf), goto Loop10x1
                            | # (-inf,9]
                            | # [0,9]
                            | # [-10,-1]
                            | # -10 -9 -8 -7
0x206:                      | Tail:
0x206: 50170000000000000000 | 			mrmovq	(%rdi),%rcx
0x210: c0f20700000000000000 | 			iaddq	$7, %rdx
0x21a: 757702000000000000   | 			jge		L39
0x223:                      | L02:		# [-3 -2 -1]
0x223: c0f20200000000000000 | 			iaddq	$2,%rdx
0x22d: 721604000000000000   | 			jl		Done
0x236: 40160000000000000000 | 			rmmovq	%rcx,(%rsi)
0x240: 730104000000000000   | 			je		Left1
0x249: 70d803000000000000   | 			jmp		Left2
0x252: c0f20200000000000000 | L46:		iaddq	$2,%rdx
0x25c: 728603000000000000   | 			jl		Left4
0x265: 735d03000000000000   | 			je		Left5
0x26e: 763403000000000000   | 			jg		Left6
0x277:                      | L39:
0x277: 40160000000000000000 | 			rmmovq	%rcx,(%rsi)
0x281: 73af03000000000000   | 			je		Left3
0x28a:                      | L49:		# [1 2 3 4 5 6]
0x28a: c0f2fcffffffffffffff | 			iaddq	$-4,%rdx
0x294: 725202000000000000   | 			jl		L46				# [-3 -2 -1]
0x29d: 730b03000000000000   | 			je		Left7			# 0
0x2a6:                      | L89:								# [1 2]
0x2a6: c0f2feffffffffffffff | 			iaddq	$-2,%rdx
0x2b0: 72e202000000000000   | 			jl		Left8
0x2b9:                      | Left9:
0x2b9: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x2bb: 50174000000000000000 | 			mrmovq 	64(%rdi),%rcx	# read val from src
0x2c5: 71d802000000000000   | 			jle		Tag9
0x2ce: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x2d8:                      | 	Tag9:
0x2d8: 40164000000000000000 | 			rmmovq 	%rcx,64(%rsi)	# ... and store it to dst
0x2e2:                      | Left8:
0x2e2: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x2e4: 50173800000000000000 | 			mrmovq 	56(%rdi),%rcx	# read val from src
0x2ee: 710103000000000000   | 			jle		Tag8
0x2f7: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x301:                      | 	Tag8:
0x301: 40163800000000000000 | 			rmmovq 	%rcx,56(%rsi)	# ... and store it to dst
0x30b:                      | Left7:
0x30b: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x30d: 50173000000000000000 | 			mrmovq 	48(%rdi),%rcx	# read val from src
0x317: 712a03000000000000   | 			jle		Tag7
0x320: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x32a:                      | 	Tag7:		
0x32a: 40163000000000000000 | 			rmmovq 	%rcx,48(%rsi)	# ... and store it to dst
0x334:                      | Left6:
0x334: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x336: 50172800000000000000 | 			mrmovq 	40(%rdi),%rcx	# read val from src
0x340: 715303000000000000   | 			jle		Tag6
0x349: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x353:                      | 	Tag6:
0x353: 40162800000000000000 | 			rmmovq 	%rcx,40(%rsi)	# ... and store it to dst
0x35d:                      | Left5:
0x35d: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x35f: 50172000000000000000 | 			mrmovq 	32(%rdi),%rcx	# read val from src
0x369: 717c03000000000000   | 			jle		Tag5
0x372: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x37c:                      | 	Tag5:
0x37c: 40162000000000000000 | 			rmmovq 	%rcx,32(%rsi)	# ... and store it to dst
0x386:                      | Left4:
0x386: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x388: 50171800000000000000 | 			mrmovq 	24(%rdi),%rcx	# read val from src
0x392: 71a503000000000000   | 			jle		Tag4
0x39b: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x3a5:                      | 	Tag4:
0x3a5: 40161800000000000000 | 			rmmovq 	%rcx,24(%rsi)	# ... and store it to dst
0x3af:                      | Left3:
0x3af: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x3b1: 50171000000000000000 | 			mrmovq 	16(%rdi),%rcx	# read val from src
0x3bb: 71ce03000000000000   | 			jle		Tag3
0x3c4: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x3ce:                      | 	Tag3:
0x3ce: 40161000000000000000 | 			rmmovq 	%rcx,16(%rsi)	# ... and store it to dst
0x3d8:                      | Left2:
0x3d8: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x3da: 50170800000000000000 | 			mrmovq 	8(%rdi),%rcx	# read val from src
0x3e4: 71f703000000000000   | 			jle		Tag2
0x3ed: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x3f7:                      | 	Tag2:
0x3f7: 40160800000000000000 | 			rmmovq 	%rcx,8(%rsi)	# ... and store it to dst
0x401:                      | Left1:
0x401: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x403: 711604000000000000   | 			jle		Done
0x40c: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x416:                      | Done:
0x416: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x417:                      | End:
                            | #/* $end ncopy-ys */
0x417:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: ffffffffffffffff     | 	.quad -1
0x420: feffffffffffffff     | 	.quad -2
0x428: 0300000000000000     | 	.quad 3
0x430: 0400000000000000     | 	.quad 4
0x438: 0500000000000000     | 	.quad 5
0x440: faffffffffffffff     | 	.quad -6
0x448: f9ffffffffffffff     | 	.quad -7
0x450: 0800000000000000     | 	.quad 8
0x458: f7ffffffffffffff     | 	.quad -9
0x460: f6ffffffffffffff     | 	.quad -10
0x468: f5ffffffffffffff     | 	.quad -11
0x470: 0c00000000000000     | 	.quad 12
0x478: f3ffffffffffffff     | 	.quad -13
0x480: 0e00000000000000     | 	.quad 14
0x488: f1ffffffffffffff     | 	.quad -15
0x490: 1000000000000000     | 	.quad 16
0x498: efffffffffffffff     | 	.quad -17
0x4a0: 1200000000000000     | 	.quad 18
0x4a8: 1300000000000000     | 	.quad 19
0x4b0: 1400000000000000     | 	.quad 20
0x4b8: ebffffffffffffff     | 	.quad -21
0x4c0: 1600000000000000     | 	.quad 22
0x4c8: e9ffffffffffffff     | 	.quad -23
0x4d0: 1800000000000000     | 	.quad 24
0x4d8: e7ffffffffffffff     | 	.quad -25
0x4e0: 1a00000000000000     | 	.quad 26
0x4e8: 1b00000000000000     | 	.quad 27
0x4f0: 1c00000000000000     | 	.quad 28
0x4f8: e3ffffffffffffff     | 	.quad -29
0x500: 1e00000000000000     | 	.quad 30
0x508: e1ffffffffffffff     | 	.quad -31
0x510: 2000000000000000     | 	.quad 32
0x518: 2100000000000000     | 	.quad 33
0x520: 2200000000000000     | 	.quad 34
0x528: ddffffffffffffff     | 	.quad -35
0x530: dcffffffffffffff     | 	.quad -36
0x538: 2500000000000000     | 	.quad 37
0x540: 2600000000000000     | 	.quad 38
0x548: 2700000000000000     | 	.quad 39
0x550: 2800000000000000     | 	.quad 40
0x558: d7ffffffffffffff     | 	.quad -41
0x560: d6ffffffffffffff     | 	.quad -42
0x568: d5ffffffffffffff     | 	.quad -43
0x570: 2c00000000000000     | 	.quad 44
0x578: 2d00000000000000     | 	.quad 45
0x580: d2ffffffffffffff     | 	.quad -46
0x588: d1ffffffffffffff     | 	.quad -47
0x590: 3000000000000000     | 	.quad 48
0x598: 3100000000000000     | 	.quad 49
0x5a0: 3200000000000000     | 	.quad 50
0x5a8: 3300000000000000     | 	.quad 51
0x5b0: 3400000000000000     | 	.quad 52
0x5b8: cbffffffffffffff     | 	.quad -53
0x5c0: caffffffffffffff     | 	.quad -54
0x5c8: 3700000000000000     | 	.quad 55
0x5d0: c8ffffffffffffff     | 	.quad -56
0x5d8: c7ffffffffffffff     | 	.quad -57
0x5e0: c6ffffffffffffff     | 	.quad -58
0x5e8: c5ffffffffffffff     | 	.quad -59
0x5f0: c4ffffffffffffff     | 	.quad -60
0x5f8: c3ffffffffffffff     | 	.quad -61
0x600: c2ffffffffffffff     | 	.quad -62
0x608: c1ffffffffffffff     | 	.quad -63
0x610: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x620:                      | 	.align 16
0x620:                      | Predest:
0x620: fadebc0000000000     | 	.quad 0xbcdefa
0x628:                      | dest:
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820:                      | Postdest:
0x820: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x828:                      | .align 8
                            | # Run time stack
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
0x898: 0000000000000000     | 	.quad 0
0x8a0: 0000000000000000     | 	.quad 0
                            | 
0x8a8:                      | Stack:
