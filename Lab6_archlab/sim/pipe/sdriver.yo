                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f61804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Name: 万金易
                            | # ID:   519021911049
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | # Name: 	万金易
                            | # ID:   	519021911049
                            | # Describe how and why you modified the baseline code.
                            | # 1. add iaddq
                            | # 2. we will set CC at iaddq, so if put iaddq $-1,%rdx before #    jp loop there will be no need to calculate andq %rdx,
                            | #    %rdx.
                            | # 3. 十路展开 + 消除bubble + 挑选过节点的三叉查找树定位剩余部分
                            | # 
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: c0f2f7ffffffffffffff | 			iaddq  	$-9 ,%rdx   	# if len < 9, goto Tail
0x03c: 72dd01000000000000   | 			jl		Tail
                            | # Loop 9x1
                            | # [9,+inf)		
0x045:                      | Loop9x1:
                            | 	# read 9 val from src
0x045: 50170000000000000000 | 			mrmovq 	 (%rdi),%rcx
0x04f: 50370800000000000000 | 			mrmovq 	8(%rdi),%rbx
0x059: 50571000000000000000 | 			mrmovq 16(%rdi),%rbp
0x063: 50871800000000000000 | 			mrmovq 24(%rdi),%r8
0x06d: 50972000000000000000 | 			mrmovq 32(%rdi),%r9
0x077: 50a72800000000000000 | 			mrmovq 40(%rdi),%r10
0x081: 50b73000000000000000 | 			mrmovq 48(%rdi),%r11
0x08b: 50c73800000000000000 | 			mrmovq 56(%rdi),%r12
0x095: 50d74000000000000000 | 			mrmovq 64(%rdi),%r13
                            | 	# store to dst
0x09f: 40160000000000000000 | 			rmmovq %rcx,  (%rsi)
0x0a9: 40360800000000000000 | 			rmmovq %rbx, 8(%rsi)
0x0b3: 40561000000000000000 | 			rmmovq %rbp,16(%rsi)
0x0bd: 40861800000000000000 | 			rmmovq %r8 ,24(%rsi)
0x0c7: 40962000000000000000 | 			rmmovq %r9 ,32(%rsi)
0x0d1: 40a62800000000000000 | 			rmmovq %r10,40(%rsi)
0x0db: 40b63000000000000000 | 			rmmovq %r11,48(%rsi)
0x0e5: 40c63800000000000000 | 			rmmovq %r12,56(%rsi)
0x0ef: 40d64000000000000000 | 			rmmovq %r13,64(%rsi)
                            | 			
0x0f9: 6211                 | 			andq	%rcx,%rcx	# val0 <= 0?
0x0fb: 710e01000000000000   | 			jle		test1		# if so, goto test1
0x104: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x10e:                      | test1:
0x10e: 6233                 | 			andq	%rbx,%rbx	# val1 <= 0?
0x110: 712301000000000000   | 			jle		test2		# if so, goto test2
0x119: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x123:                      | test2:			
0x123: 6255                 | 			andq	%rbp,%rbp	# val2 <= 0?
0x125: 713801000000000000   | 			jle		test3		# if so, goto test3
0x12e: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x138:                      | test3:
0x138: 6288                 | 			andq	%r8 ,%r8	# val3 <= 0?
0x13a: 714d01000000000000   | 			jle		test4		# if so, goto test4
0x143: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x14d:                      | test4:
0x14d: 6299                 | 			andq	%r9 ,%r9	# val4 <= 0?
0x14f: 716201000000000000   | 			jle		test5		# if so, goto test5
0x158: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x162:                      | test5:
0x162: 62aa                 | 			andq	%r10,%r10	# val5 <= 0?
0x164: 717701000000000000   | 			jle		test6		# if so, goto test6
0x16d: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x177:                      | test6:
0x177: 62bb                 | 			andq	%r11,%r11	# val6 <= 0?
0x179: 718c01000000000000   | 			jle		test7		# if so, goto test7
0x182: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x18c:                      | test7:
0x18c: 62cc                 | 			andq	%r12,%r12	# val7 <= 0?
0x18e: 71a101000000000000   | 			jle		test8		# if so, goto test8
0x197: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x1a1:                      | test8:
0x1a1: 62dd                 | 			andq	%r13,%r13	# val8 <= 0?
0x1a3: 71b601000000000000   | 			jle		LoopEnd		# if so, goto loop end
0x1ac: c0f00100000000000000 | 			iaddq	$1,%rax		# count ++
0x1b6:                      | LoopEnd:	
0x1b6: c0f74800000000000000 | 			iaddq	$72 ,%rdi	# src += 9
0x1c0: c0f64800000000000000 | 			iaddq	$72 ,%rsi	# dst += 9
0x1ca: c0f2f7ffffffffffffff | 			iaddq	$-9,%rdx	# len -= 10, set CC
0x1d4: 754500000000000000   | 			jge		Loop9x1		# [9,+inf), goto Loop9x1
                            | # (-inf,8]
                            | # [1,8]
                            | # [-9,-1]
                            | # -9 -8 -7
                            | # -2 -1 0 1 2 3 4 5 6 
                            | #         -2 -1 0 1 2 3 
                            | # 0 1 2
                            | # 3 4 5
                            | # 6 7 8
                            | 
0x1dd:                      | Tail:
0x1dd: c0f20700000000000000 | 			iaddq	$7,%rdx			# if len <= 2
0x1e7: 711602000000000000   | 			jle		L02
0x1f0: 50170000000000000000 | 			mrmovq	(%rdi),%rcx
0x1fa: c0f2fdffffffffffffff | 			iaddq	$-3,%rdx
0x204: 767e02000000000000   | 			jg		L68
0x20d: 704f02000000000000   | 			jmp		L35
0x216:                      | L02:
0x216: c0f20100000000000000 | 			iaddq	$1,%rdx
0x220: 72e103000000000000   | 			jl		Done
0x229: 50170000000000000000 | 			mrmovq	(%rdi),%rcx
0x233: 40160000000000000000 | 			rmmovq  %rcx,(%rsi)		# bubble
0x23d: 73cc03000000000000   | 			je		Left1
0x246: 76a303000000000000   | 			jg		Left2
0x24f:                      | L35:
                            | 
0x24f: 40160000000000000000 | 			rmmovq  %rcx,(%rsi)
0x259: c0f20100000000000000 | 			iaddq	$1,%rdx
0x263: 735103000000000000   | 			je		Left4
0x26c: 762803000000000000   | 			jg		Left5
0x275: 707a03000000000000   | 			jmp		Left3
0x27e:                      | L68:
0x27e: 40160000000000000000 | 			rmmovq  %rcx,(%rsi)
0x288: c0f2feffffffffffffff | 			iaddq	$-2,%rdx
0x292: 73d602000000000000   | 			je		Left7
0x29b: 76ad02000000000000   | 			jg		Left8
0x2a4: 70ff02000000000000   | 			jmp		Left6
0x2ad:                      | Left8:
0x2ad: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x2af: 50173800000000000000 | 			mrmovq 	56(%rdi),%rcx	# read val from src
0x2b9: 71cc02000000000000   | 			jle		Tag8
0x2c2: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x2cc:                      | 	Tag8:
0x2cc: 40163800000000000000 | 			rmmovq 	%rcx,56(%rsi)	# ... and store it to dst
0x2d6:                      | Left7:
0x2d6: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x2d8: 50173000000000000000 | 			mrmovq 	48(%rdi),%rcx	# read val from src
0x2e2: 71f502000000000000   | 			jle		Tag7
0x2eb: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x2f5:                      | 	Tag7:		
0x2f5: 40163000000000000000 | 			rmmovq 	%rcx,48(%rsi)	# ... and store it to dst
0x2ff:                      | Left6:
0x2ff: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x301: 50172800000000000000 | 			mrmovq 	40(%rdi),%rcx	# read val from src
0x30b: 711e03000000000000   | 			jle		Tag6
0x314: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x31e:                      | 	Tag6:
0x31e: 40162800000000000000 | 			rmmovq 	%rcx,40(%rsi)	# ... and store it to dst
0x328:                      | Left5:
0x328: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x32a: 50172000000000000000 | 			mrmovq 	32(%rdi),%rcx	# read val from src
0x334: 714703000000000000   | 			jle		Tag5
0x33d: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x347:                      | 	Tag5:
0x347: 40162000000000000000 | 			rmmovq 	%rcx,32(%rsi)	# ... and store it to dst
0x351:                      | Left4:
0x351: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x353: 50171800000000000000 | 			mrmovq 	24(%rdi),%rcx	# read val from src
0x35d: 717003000000000000   | 			jle		Tag4
0x366: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x370:                      | 	Tag4:
0x370: 40161800000000000000 | 			rmmovq 	%rcx,24(%rsi)	# ... and store it to dst
0x37a:                      | Left3:
0x37a: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x37c: 50171000000000000000 | 			mrmovq 	16(%rdi),%rcx	# read val from src
0x386: 719903000000000000   | 			jle		Tag3
0x38f: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x399:                      | 	Tag3:
0x399: 40161000000000000000 | 			rmmovq 	%rcx,16(%rsi)	# ... and store it to dst
0x3a3:                      | Left2:
0x3a3: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x3a5: 50170800000000000000 | 			mrmovq 	8(%rdi),%rcx	# read val from src
0x3af: 71c203000000000000   | 			jle		Tag2
0x3b8: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
0x3c2:                      | 	Tag2:
0x3c2: 40160800000000000000 | 			rmmovq 	%rcx,8(%rsi)	# ... and store it to dst
0x3cc:                      | Left1:
0x3cc: 6211                 | 			andq	%rcx,%rcx		# test val <= 0?
0x3ce: 71e103000000000000   | 			jle		Done
0x3d7: c0f00100000000000000 | 			iaddq	$1,%rax			# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3e1:                      | Done:
0x3e1: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3e2:                      | End:
                            | #/* $end ncopy-ys */
0x3e2:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3e8:                      | 	.align 8
0x3e8:                      | src:
0x3e8: ffffffffffffffff     | 	.quad -1
0x3f0: 0200000000000000     | 	.quad 2
0x3f8: 0300000000000000     | 	.quad 3
0x400: fcffffffffffffff     | 	.quad -4
0x408: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x410:                      | 	.align 16
0x410:                      | Predest:
0x410: fadebc0000000000     | 	.quad 0xbcdefa
0x418:                      | dest:
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438:                      | Postdest:
0x438: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x440:                      | .align 8
                            | # Run time stack
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
                            | 
0x4c0:                      | Stack:
