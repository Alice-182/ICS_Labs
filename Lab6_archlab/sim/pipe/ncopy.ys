# Name: 万金易
# ID:   519021911049
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
# Name: 	万金易
# ID:   	519021911049
# Describe how and why you modified the baseline code.
# 1. 	use iaddq to replace 'irmov and opq' :
#		2 instructions will be reduced to 1 instruction
# 2.	apply 10x1 loop unrolling:
#		reduce the effect of loop overhead
# 3.	remaining elements([0,9], less than 10 elements):
#		the logic is similar to 'switch case' without 'break' in C++
#		when jump to case 9, case 9 will also do things written in case 8 
#		7 ... 0
#		switch{
#			case 9:
#			case 8:
#			case 7:
#			case 6:
#			case 5:
#			case 4:
#			case 3:
#			case 2:
#			case 1:
#			case 0:
#		}
# 4.	use a ternary tree to jmp to different 'cases' according to 
#		different remainder:
#					[0,9]
#		[0,2]		  3			[4,9]
#		0,1,2				[4,6] 7  [8,9]
#							4,5,6	  8,9	
#		See Line 136-158
#		why ternary? when we do an iaddq,we can divide the original range #		into 3 sections: [negtive] {0} [positive]
#		
# 5.	insert "count++" (of the previous element) between 
#		current 'load' and 'use'when dealing with the remains, :
#		see line 161-165
#       avoid 'load/use' data hazard
#		need to move the 1st element(which will be moved except the 
#		remain num is 0) beforehand so that every element has 
#		former element(see line 136 142 150)
# 6. 	we will set CC at iaddq, so if put iaddq $-1,%rdx before   jp
# 		loop there will be no need to calculate andq %rdx,%rdx.
# 7.	reorder some sections:
#		to reduce the num of jmp on average 
# 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
			iaddq  	$-10 ,%rdx   	# if len < 10, goto Tail
			jl		Tail
# Loop 10x1
# [10,+inf)		
Loop10x1:
	# read 10 val from src
			mrmovq 	 (%rdi),%rcx
			mrmovq 	8(%rdi),%rbx
			mrmovq 16(%rdi),%rbp
			mrmovq 24(%rdi),%r8
			mrmovq 32(%rdi),%r9
			mrmovq 40(%rdi),%r10
			mrmovq 48(%rdi),%r11
			mrmovq 56(%rdi),%r12
			mrmovq 64(%rdi),%r13
			mrmovq 72(%rdi),%r14
	# store to dst
			rmmovq %rcx,  (%rsi)
			rmmovq %rbx, 8(%rsi)
			rmmovq %rbp,16(%rsi)
			rmmovq %r8 ,24(%rsi)
			rmmovq %r9 ,32(%rsi)
			rmmovq %r10,40(%rsi)
			rmmovq %r11,48(%rsi)
			rmmovq %r12,56(%rsi)
			rmmovq %r13,64(%rsi)
			rmmovq %r14,72(%rsi)
			
			andq	%rcx,%rcx	# val0 <= 0?
			jle		test1		# if so, goto test1
			iaddq	$1,%rax		# count ++
test1:
			andq	%rbx,%rbx	# val1 <= 0?
			jle		test2		# if so, goto test2
			iaddq	$1,%rax		# count ++
test2:			
			andq	%rbp,%rbp	# val2 <= 0?
			jle		test3		# if so, goto test3
			iaddq	$1,%rax		# count ++
test3:
			andq	%r8 ,%r8	# val3 <= 0?
			jle		test4		# if so, goto test4
			iaddq	$1,%rax		# count ++
test4:
			andq	%r9 ,%r9	# val4 <= 0?
			jle		test5		# if so, goto test5
			iaddq	$1,%rax		# count ++
test5:
			andq	%r10,%r10	# val5 <= 0?
			jle		test6		# if so, goto test6
			iaddq	$1,%rax		# count ++
test6:
			andq	%r11,%r11	# val6 <= 0?
			jle		test7		# if so, goto test7
			iaddq	$1,%rax		# count ++
test7:
			andq	%r12,%r12	# val7 <= 0?
			jle		test8		# if so, goto test8
			iaddq	$1,%rax		# count ++
test8:
			andq	%r13,%r13	# val8 <= 0?
			jle		test9		# if so, goto test9
			iaddq	$1,%rax		# count ++
test9:
			andq	%r14,%r14	# val8 <= 0?
			jle		LoopEnd		# if so, goto loop end
			iaddq	$1,%rax		# count ++
LoopEnd:	
			iaddq	$80 ,%rdi	# src += 10
			iaddq	$80 ,%rsi	# dst += 10
			iaddq	$-10,%rdx	# len -= 10, set CC
			jge		Loop10x1	# [10,+inf), goto Loop10x1
# (-inf,9]
# [0,9]
# [-10,-1]
# -10 -9 -8 -7
Tail:
			mrmovq	(%rdi),%rcx
			iaddq	$7, %rdx
			jge		L39
L02:		# [-3 -2 -1]
			iaddq	$2,%rdx
			jl		Done
			rmmovq	%rcx,(%rsi)
			je		Left1
			jmp		Left2
L46:		iaddq	$2,%rdx
			jl		Left4
			je		Left5
			jmp		Left6
L39:
			rmmovq	%rcx,(%rsi)
			je		Left3
L49:		# [1 2 3 4 5 6]
			iaddq	$-4,%rdx
			jl		L46				# [-3 -2 -1]
			je		Left7			# 0
L89:								# [1 2]
			iaddq	$-2,%rdx
			jl		Left8
Left9:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	64(%rdi),%rcx	# read val from src
			jle		Tag9
			iaddq	$1,%rax			# count++
	Tag9:
			rmmovq 	%rcx,64(%rsi)	# ... and store it to dst
Left8:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	56(%rdi),%rcx	# read val from src
			jle		Tag8
			iaddq	$1,%rax			# count++
	Tag8:
			rmmovq 	%rcx,56(%rsi)	# ... and store it to dst
Left7:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	48(%rdi),%rcx	# read val from src
			jle		Tag7
			iaddq	$1,%rax			# count++
	Tag7:		
			rmmovq 	%rcx,48(%rsi)	# ... and store it to dst
Left6:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	40(%rdi),%rcx	# read val from src
			jle		Tag6
			iaddq	$1,%rax			# count++
	Tag6:
			rmmovq 	%rcx,40(%rsi)	# ... and store it to dst
Left5:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	32(%rdi),%rcx	# read val from src
			jle		Tag5
			iaddq	$1,%rax			# count++
	Tag5:
			rmmovq 	%rcx,32(%rsi)	# ... and store it to dst
Left4:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	24(%rdi),%rcx	# read val from src
			jle		Tag4
			iaddq	$1,%rax			# count++
	Tag4:
			rmmovq 	%rcx,24(%rsi)	# ... and store it to dst
Left3:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	16(%rdi),%rcx	# read val from src
			jle		Tag3
			iaddq	$1,%rax			# count++
	Tag3:
			rmmovq 	%rcx,16(%rsi)	# ... and store it to dst
Left2:
			andq	%rcx,%rcx		# test val <= 0?
			mrmovq 	8(%rdi),%rcx	# read val from src
			jle		Tag2
			iaddq	$1,%rax			# count++
	Tag2:
			rmmovq 	%rcx,8(%rsi)	# ... and store it to dst
Left1:
			andq	%rcx,%rcx		# test val <= 0?
			jle		Done
			iaddq	$1,%rax			# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
