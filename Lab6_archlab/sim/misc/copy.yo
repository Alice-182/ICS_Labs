                            | # copies a block of words from one part of memory to another
                            | # compute the checksum (Xor) of all words
                            | 
                            | # Execution begins at address 0
0x000:                      |         .pos 0
0x000: 30f40002000000000000 |         irmovq  stack, %rsp          # Set up stack pointer
0x00a: 804800000000000000   |         call    main                 # Execute main program
0x013: 00                   |         halt                         # Terminate program
                            | 
0x018:                      |         .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: b000000000000000     |         .quad 0x0b0
0x028: 000c000000000000     |         .quad 0xc00
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     |         .quad 0x111
0x038: 2202000000000000     |         .quad 0x222
0x040: 3303000000000000     |         .quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |         irmovq  src, %rdi               # save the 1st argument in %rdi
0x052: 30f63000000000000000 |         irmovq  dest,%rsi               # save the 2nd argument in %rsi
0x05c: 30f20300000000000000 |         irmovq  $3,  %rdx               # save the 3rd argument in %rdx
0x066: 807000000000000000   |         call    copy_block              # invoke func copy_block(src,dest,len)
0x06f: 90                   |         ret
                            | 
                            | # long copy_block(long * src,long *dest, long len)
0x070:                      | copy_block:
0x070: 6300                 |         xorq    %rax,%rax               # result = 0
0x072: 70b500000000000000   |         jmp     test                    # test
0x07b:                      | loop:
0x07b: 50870000000000000000 |         mrmovq  (%rdi),%r8              # val = *src
0x085: 30f90800000000000000 |         irmovq  $8, %r9                 # Constant 8
0x08f: 30fa0100000000000000 |         irmovq  $1, %r10                # Constant 1
0x099: 30fb0000000000000000 |         irmovq  $0, %r11                # Constant 0
0x0a3: 6097                 |         addq    %r9,%rdi                # src++
0x0a5: 40860000000000000000 |         rmmovq  %r8,(%rsi)              # *dest = val
0x0af: 6096                 |         addq    %r9,%rsi                # dest++
0x0b1: 6380                 |         xorq    %r8,%rax                # result ^= val
0x0b3: 61a2                 |         subq    %r10,%rdx               # len--
0x0b5:                      | test:
0x0b5: 61b2                 |         subq    %r11,%rdx                 # set CC
0x0b7: 767b00000000000000   |         jg      loop                    # loop while len > 0
0x0c0: 90                   |         ret
                            | # Stack starts here and grows to lower address
0x200:                      |         .pos 0x200
0x200:                      | stack:
