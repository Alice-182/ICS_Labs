                            | # Name: 万金易
                            | # ID : 519021911049
                            | 
                            | # Execution begins at address 0
0x000:                      |         .pos 0
0x000: 30f40002000000000000 |         irmovq  stack, %rsp          # Set up stack pointer
0x00a: 804800000000000000   |         call    main                 # Execute main program
0x013: 00                   |         halt                         # Terminate program
                            | 
                            | # Sample linked list
0x018:                      |         .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: 2800000000000000     |         .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |         .quad 0x0b0
0x030: 3800000000000000     |         .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |         .quad 0xc00
0x040: 0000000000000000     |         .quad 0
                            |         
0x048:                      | main:
0x048: 30f71800000000000000 |         irmovq  ele1,%rdi            # save the 1st argument in %rdi
0x052: 805c00000000000000   |         call    sum_list             # sum_list(ele1)
0x05b: 90                   |         ret
                            | 
                            | # long sum_list(list_ptr ls)
                            | # ls point to the first element of the list, (last element).next == null
0x05c:                      | sum_list:
0x05c: 6300                 |         xorq    %rax,%rax            # val = 0, %rax: val 
0x05e: 30f90800000000000000 |         irmovq  $8,%r9               # Consant 8
0x068: 6277                 |         andq    %rdi,%rdi            # set CC
0x06a: 708b00000000000000   |         jmp     test                 # test for entering(!=0) loop
0x073:                      | loop:
0x073: 50870000000000000000 |         mrmovq  (%rdi),%r8           # save ls->val at %r8
0x07d: 6080                 |         addq    %r8,%rax             # add to val
0x07f: 6097                 |         addq    %r9,%rdi             # %rdi = %rdi + 8
0x081: 50770000000000000000 |         mrmovq  (%rdi),%rdi          # save ls->next at %rdi
0x08b:                      | test:
0x08b: 6277                 |         andq    %rdi,%rdi
0x08d: 747300000000000000   |         jne     loop                 # Stop when 0
0x096: b03f                 |         popq    %rbx                 # restore %rbx
0x098: 90                   |         ret                          # return
                            | 
                            | # Stack starts here and grows to lower address
0x200:                      |         .pos 0x200
0x200:                      | stack:
